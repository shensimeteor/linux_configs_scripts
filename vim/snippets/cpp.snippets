snippet incsys
	#include <${1:lib}>
snippet inc #1
	#include "${1:lib}"
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
		${2}
	}
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`}
	{
	public:
		$1(${2:arguments});
		virtual ~$1();

	private:
		${3:/* data */}
	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Class description
snippet desc
	/**
	 * \class `Filename()` `Filename()`.h
	 * \brief ${1:<write brief here>}
	 *
	 * ${2:<write details here>}
	 *
	 * \author `g:author`
	 * \date `strftime("%Y-%m-%d")`
	 */


# Header enclosing cover
snippet ifndef
	#ifndef `Filename()`_h
	#define `Filename()`_h



	#endif
# Implementation
snippet impl
	`Filename()`::`Filename()`(${1:arguments})
	{
	}

	`Filename()`::~`Filename()`()
	{
	}
snippet rd
	ConvertEndian(rh->RadarInfo.${1:var}, sizeof(rh->RadarInfo.$1))
